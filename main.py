import os
import logging
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from sqlalchemy import BigInteger, String, DateTime, select, distinct
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="log.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î (SQLite)


class Base(DeclarativeBase):
    pass


class Channel(Base):
    __tablename__ = "channels"

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    channel_id: Mapped[int] = mapped_column(BigInteger, nullable=False)
    channel_url: Mapped[str] = mapped_column(String, nullable=False)
    timestamp: Mapped[datetime] = mapped_column(
        DateTime, default=datetime.utcnow)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∏ —Å–µ—Å—Å–∏—è
engine = create_async_engine("sqlite+aiosqlite:///channels.db")
async_session = async_sessionmaker(engine, expire_on_commit=False)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)


async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


@dp.message(F.forward_from_chat)
async def handle_forwarded_message(message: Message):
    chat = message.forward_from_chat
    channel_url = f"https://t.me/{chat.username}" if chat.username else f"chat_id:{chat.id}"

    async with async_session() as session:
        try:
            session.add(Channel(
                channel_id=chat.id,
                channel_url=channel_url
            ))
            await session.commit()
            logging.info(f"–ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {channel_url}")
            await message.reply(f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {channel_url}")
        except Exception as e:
            await session.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /channels


@dp.message(Command("channels"))
async def send_channels_list(message: Message):
    async with async_session() as session:
        try:
            result = await session.execute(
                select(distinct(Channel.channel_url)))
            channels = result.scalars().all()

            if channels:
                response = "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n" + "\n".join(channels)
                logging.info("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                await message.reply(response)
            else:
                logging.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
                await message.reply("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞


async def main():
    await create_tables()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
